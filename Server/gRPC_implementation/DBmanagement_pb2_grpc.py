# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gRPC_implementation import DBmanagement_pb2 as Protos_dot_DBmanagement__pb2


class DBmanagementStub(object):
    """The DataBase management service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetID = channel.unary_unary(
                '/db_manager.DBmanagement/GetID',
                request_serializer=Protos_dot_DBmanagement__pb2.ClientIdRequest.SerializeToString,
                response_deserializer=Protos_dot_DBmanagement__pb2.ClientDataLookupModel.FromString,
                )
        self.GetData = channel.unary_unary(
                '/db_manager.DBmanagement/GetData',
                request_serializer=Protos_dot_DBmanagement__pb2.ClientDataLookupModel.SerializeToString,
                response_deserializer=Protos_dot_DBmanagement__pb2.ClientDataModel.FromString,
                )
        self.SaveData = channel.unary_unary(
                '/db_manager.DBmanagement/SaveData',
                request_serializer=Protos_dot_DBmanagement__pb2.ClientDataModel.SerializeToString,
                response_deserializer=Protos_dot_DBmanagement__pb2.DataSavedResponce.FromString,
                )


class DBmanagementServicer(object):
    """The DataBase management service definition
    """

    def GetID(self, request, context):
        """Gets data of the client with id specified in ClientDataLookupModel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DBmanagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetID,
                    request_deserializer=Protos_dot_DBmanagement__pb2.ClientIdRequest.FromString,
                    response_serializer=Protos_dot_DBmanagement__pb2.ClientDataLookupModel.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=Protos_dot_DBmanagement__pb2.ClientDataLookupModel.FromString,
                    response_serializer=Protos_dot_DBmanagement__pb2.ClientDataModel.SerializeToString,
            ),
            'SaveData': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveData,
                    request_deserializer=Protos_dot_DBmanagement__pb2.ClientDataModel.FromString,
                    response_serializer=Protos_dot_DBmanagement__pb2.DataSavedResponce.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'db_manager.DBmanagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DBmanagement(object):
    """The DataBase management service definition
    """

    @staticmethod
    def GetID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_manager.DBmanagement/GetID',
            Protos_dot_DBmanagement__pb2.ClientIdRequest.SerializeToString,
            Protos_dot_DBmanagement__pb2.ClientDataLookupModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_manager.DBmanagement/GetData',
            Protos_dot_DBmanagement__pb2.ClientDataLookupModel.SerializeToString,
            Protos_dot_DBmanagement__pb2.ClientDataModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_manager.DBmanagement/SaveData',
            Protos_dot_DBmanagement__pb2.ClientDataModel.SerializeToString,
            Protos_dot_DBmanagement__pb2.DataSavedResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OperationsManagementStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformFullMultiplication = channel.unary_unary(
                '/db_manager.OperationsManagement/PerformFullMultiplication',
                request_serializer=Protos_dot_DBmanagement__pb2.MultiplicationParameters.SerializeToString,
                response_deserializer=Protos_dot_DBmanagement__pb2.DataTableSO.FromString,
                )


class OperationsManagementServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PerformFullMultiplication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperationsManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformFullMultiplication': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformFullMultiplication,
                    request_deserializer=Protos_dot_DBmanagement__pb2.MultiplicationParameters.FromString,
                    response_serializer=Protos_dot_DBmanagement__pb2.DataTableSO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'db_manager.OperationsManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OperationsManagement(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PerformFullMultiplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_manager.OperationsManagement/PerformFullMultiplication',
            Protos_dot_DBmanagement__pb2.MultiplicationParameters.SerializeToString,
            Protos_dot_DBmanagement__pb2.DataTableSO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
